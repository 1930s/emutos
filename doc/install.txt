Installing:

You will need the (cross-)gcc toolchain from the sparemint pages to
build this stuff. You will also probably need GNU make as the Makefile
currently tends to make more and more abuse of advanced make features.

building EmuTOS
===============

to build, simply do

    make

This will create a TOS2 image file 'emutos2.img', configured by
default for the US country. A list of the main Makefile targets is
obtained by doing 

    make help

To build EmuTOS for a different country (changes the language and the
keyboard), do

    make COUNTRY=en
or
    make COUNTRY=fr
or
    make COUNTRY=de

Finally, some settings can be configured in the file include/config.h.

A complete list of targets
==========================

emutos binaries
---------------

emutos1.img   emutos binary relocated at 0xfc0000. might be bigger than 192k.
emutos2.img   emutos binary relocated at 0xe00000
etos192k.img  emutos1.img padded to 192k, if smaller (else the target fails)
etos256k.img  emutos2.img padded to 256k, if smaller (else the target fails)
etos512k.img  emutos2.img padded to 512k, if smaller (else the target fails)
ecpr192k.img  ramtos.img compressed, and installed in an auto-decompressing
              192k image, if not bigger (else the target fails)
ecpr256k.img  ramtos.img compressed, and installed in an auto-decompressing
              256k image, if not bigger (else the target fails)
ramtos.img    emutos binary relocated to the smallest possible RAM address
              not used as BSS byt the current code.
compr1.img    the loader used to decompress ramtos, relocated at 0xfc0000
compr2.img    the loader used to decompress ramtos, relocated at 0xE00000
allbin        generates some 256k and 512k binaries
all192        genearates some 192k binaries. WARNING: do make clean first.

binary targets modifyers
------------------------

nothing       same as COUNTRY=us
COUNTRY=xx    all countries in the binary, country xx being the default
UNIQUE=xx     a smaller binary with only support for country xx
DEF='-DTOS_VERSION=0x102' 
              used to generate smaller binaries with only support for a
              subset of functionalities. WARNING: do make clean first.

utility targets
---------------

emutos.st     the image of a 360k single-sided floppy on which there is
              an autobootable ramtos.img
boot.prg      ramtos.img loader as a GEMDOS program
fd0           dd emutos.st on a floppy (linux-specific)

debug targets
-------------

emutos1.dsm, emutos2.dsm, ramtos.dsm, compr1.dsm, compr2.dsm: the edited
desassembly of the respective .img files

foo.dsm: the result of gcc -S made on */foo.c

CVS-related targets
-------------------

depend       generates dependencies
clean        cleans all generated files
distclean    as clean + deletes also some temporary editor files
cvsready     ensure the files have a proper, canonic, format for CVS
checkindent  try 'indent' without altering the files
indent       indent all files - never done yet :-(


Emulator-specific notes
=======================

STonX
-----

EmuTOS now needs no change in STonX any longer. It will run on a
normal STonX. 

But, if you want to see debugging output in STonX, you need to do two
things:

1. implement a write_native function in gemdos.c of STonX:

    /* Print string from emulated side */
    void write_native(char * addr)
    {
	char buf[1024];
	int n;

	for(n = 0 ; n < 1023 ; n++) {  /* Fill string char by char */
	    if ( (buf[n]=LM_UB(MEM(addr++))) == 0) break;
	}
	buf[1023] = 0;
        fprintf(stderr,"%s", buf);
    }

    void call_native(UL as, UL func)
    {
    #if 0
	fprintf(stderr,"Calling native %d\n",func);
    #endif
	switch (func)
	{
        case 0: /* Get the address, where string begins*/
            write_native((char *)LM_UL(MEM(as)));
            break;
        case 1:
    ...

(STonC release 0.8.0 and later already has this function)

2. Switch on the debugging output by setting, in include/config.h, the
   parameter STONX_NATIVE_PRINT to 1 before building EmuTOS.

ARAnyM
------

For ARAnyM >= 0.7.0 enable the Native Features support by setting
the DETECT_NATIVE_FEATURES parameter to 1 and also allow EmuTOS to call
the STOP instruction to free host CPU by setting the
USE_STOP_INSN_TO_FREE_HOST_CPU parameter to 1.

At last use the default (emutos2.img) or the 'falcon' Makefile target.


Other emulators
---------------

By default the emutos2.img ROM image is not padded to a particular size.
However some emulators expect ROM images with a fixed size of 192k, 
or 256k, or 512k. for these emulators, Use 'make 256' or 'make 512' to 
create etos256k.img and etos512k.img, ROM images padded to the specified size.

Note: Since the inclusion of the AES and VDI, EmuTOS no longer can fit
in a 192k image. If you want a 192k TOS1 ROM absolutely try 

    make WITH_AES=0 192

Hope this is all. AND: EmuTOS is not thought for the public right now.
It is alpha!!! Although it may run well for you, it is not bug tested.


Have success!
--
Your EmuTOS team
