This file documents the status of the single parts of EmuTOS

Here is a quick list of supported emulators/hardware:
(updated last 18. Nov. 2001)

  emulator/machine          | ROM img | autoboot | boot.prg
  --------------------------+---------+----------+---------
  STonX, with cartridge     |   yes   |  no (1)  |   yes  
  STonC, with cartridge     |   yes   |   yes    |   yes   
  STonC, no cartridge       |   yes   |   yes    |   yes   
  STeem v1.5                |   yes   |   yes    |   yes   
  WinSTon V0.1r2            |    no   |    no    |    no   
  TOSBox 1.10a              |    no   |    ?     |    ?    
  Pacifist v0.48            |   yes   |   yes    |   yes   
  real MegaSTE (2MB RAM)    |   n/a   |   yes    |   yes   
  Hatari (latest CVS vers.) |   yes   |    ?     |    ?
  Aranym (latest CVS vers.) |   yes   |    ?     |    ?

ROM img means:  Using the etos192k.img/etosfalc.img file as ROM

autoboot means: Loading emutos.st disk from bootsector, then when prompted,
                eject a: 

boot.prg means: A FAT12 floppy containing ramtos.img and boot.prg 

(1) because STonX does not allow to eject floppies.



Now lets talk about the different subsystems, and if they are implemented.

This is, what the first field of the following table means:

- Not yet implemented
X Fully implemented
> Partially implemented
? status unknown
t Fully implemented and partially tested
T tested and working on an emulator or real hardware


 Hardware initialisation
 ----------------------------------------------------------------------------
 > CPU setting (for CPU >= 68020, vbr, mmu, msp, isp, ... not inited)
 > FPU (detected, is any initialisation needed?) 
 T Memory controller (both ST and Falcon)
 T DMA controller
 t WD 1772 Floppy disk controller (write track not tested)
 T MFP
 T PSG
 T ST shifter
 t ACIAs, IKBD protocol (mouse not tested)
 t MegaST Real-Time Clock  (set clock not tested)
 > STE shifter
 t NVRAM (including RTC)
 - Videl
 - Blitter
 - Microwire
 - DMA sound
 - DSP
 - SCC
 - IDE



 BOOT sequence
 ----------------------------------------------------------------------------
 T configure memory
 X execute reset routine
 X detect monitor type
 T detect graphics resolution
 t detect processor type, FPU type and hardware features
 X setup a cookie jar with system cookies
   ...
 X init floppy drives
 T boot floppy
 - boot DMA
 - execute reset-resident prgs
 T run AUTO prgs
 T run 'command.prg'
 T run the default shell, EmuCON



 BIOS devices
 ----------------------------------------------------------------------------
 - parallel port
 - serial port
 T console
 X IKBD
 X MIDI
 X ascii 



 ACIA interrupt routines
 ----------------------------------------------------------------------------
 - midierr
 - ikbderr
 X midi input
 T ikbd key events
 t IKBD clock           (set clock not tested)
 - mouse                (will be done as part of VDI)
 - joysticks            (is done by games - TOS does not have one)



 BIOS Functions
 ----------------------------------------------------------------------------
 T 0x00 getmpb
 T 0x01 bconstat        (the function works for console only)
 > 0x02 bconin          (the function works for console only)
 T 0x03 bconout         (the function works for console only)
 T 0x04 rwabs
 T 0x05 setexc
 T 0x06 tickcal
 T 0x07 getbpb
 > 0x08 bcostat         (the function works for console only)
 > 0x09 mediach         (crude, floppy write-protect mode not monitored)
 X 0x0a drvmap		(the function works, but not the devices)
 X 0x0b kbshift
 X 0x11 date_time       (used by BDOS to get/set the date and time)


 XBIOS Functions
 ----------------------------------------------------------------------------
 X 0x00 initmous
 - 0x01 ssbrk           (useless - will not be implemented)
 X 0x02 physBase
 X 0x03 logBase
 X 0x04 getRez
 > 0x05 setScreen       (the resolution change is ignored)
 X 0x06 setPallete
 X 0x07 setColor
 X 0x08 floprd
 X 0x09 flopwr
 X 0x0a flopfmt
 - 0x0b used-by-BIOS    (useless - will not be implemented)
 X 0x0c midiws
 X 0x0d mfpint
 X 0x0e iorec
 X 0x0f rsconf
 X 0x10 keytbl
 X 0x11 random
 X 0x12 protobt
 X 0x13 flopver
 - 0x14 scrdmp
 T 0x15 cursconf
 X 0x16 settime
 X 0x17 gettime
 X 0x18 bioskeys
 X 0x19 ikbdws
 X 0x1a jdisint
 X 0x1b jenabint
 X 0x1c giaccess
 X 0x1d offgibit
 X 0x1e ongibit
 X 0x1f xbtimer
 X 0x20 dosound
 - 0x21 setprt          (useless - will not be implemented)
 X 0x22 kbdvbase
 - 0x23 kbrate
 - 0x24 prtblk          (useless - will not be implemented)
 X 0x25 vsync
 X 0x26 supexec
 - 0x27 puntaes         (useless - no AES available)

 X 0x29 floprate
 - 0x2a DMAread
 - 0x2b DMAwrite
 - 0x2c Bconmap

 X 0x2e NVMaccess

 - 0x40 Blitmode


 GEMDOS Functions
 ----------------------------------------------------------------------------
 X 0x00 Pterm0
 X 0x01 Cconin
 X 0x02 Cconout
 X 0x03 Cauxin
 X 0x04 Cauxout
 X 0x05 Cprnout
 X 0x06 Crawio
 X 0x07 Crawin
 X 0x08 Cnecin
 X 0x09 Cconws
 X 0x0a Cconrs
 X 0x0b Cconis
 X 0x0e Dsetdrv
 X 0x10 Cconos
 X 0x11 Cprnos
 X 0x12 Cauxis
 X 0x13 Cauxos
 X 0x19 Dgetdrv
 X 0x1a Fsetdta
 X 0x20 Super
 X 0x25 Ssetvec 	(extra, not in available TOS)
 X 0x2a Tgetdate
 X 0x2b Tsetdate
 X 0x2c Tgettime
 X 0x2d Tsettime
 X 0x2f Fgetdta
 X 0x30 Sversion
 X 0x31 Ptermres
 X 0x35 Sgetvec 	(extra, not available in TOS)
 X 0x36 Dfree
 X 0x39 Dcreate
 X 0x3a Ddelete
 X 0x3b Dsetpath
 X 0x3c Fcreate
 X 0x3d Fopen
 X 0x3e Fclose
 X 0x3f Fread
 X 0x40 Fwrite
 X 0x41 Fdelete
 X 0x42 Fseek
 X 0x43 Fattrib
 X 0x45 Fdup
 X 0x46 Fforce
 X 0x47 Dgetpath
 X 0x48 Malloc
 X 0x49 Mfree
 X 0x4a Mshrink
 X 0x4b Pexec		(flag 6 not really handled)
 X 0x4c Pterm
 X 0x4e Fsfirst
 X 0x4f Fsnext
 X 0x56 Frename
 X 0x57 Fdatime



==== VDI ====================================================================
 
 not implemented
 
==== AES ====================================================================

 not implemented
 
