- implement XBIOS calls
- implement linea functions
- merge identical headers, and put them all in an include directory (?)
- check that RAM disks work (an easy way to test bdos under STonX)
- implement flopvbl (deselect idle drive), other TODOs in floppy.c
- VDI: code cleanup, Makefile, esclisa and gsxvars like in EmuTOS
- Go on with implementing mouse driver
- auto programs are not run after reset
- use extended argv specification in EmuCON
- check that VEC_TIMER (vector number 0x100) is called by bios every 50th sec
- check that VEC_CRITICALERR (0x101) is called when the BIOS encounters errors
- should hitting control-c terminate the current process? if so, how?
- is it really necessary to have both NULLPTR and NULPTR defined?
- handle .PRG flag bits. Pexec should clear the BSS or the HEAP depending.
- handle alternate RAM in proc.c; design an interface between memory and
  proc, and move mem-only functions from proc to memory
- implement go_then_free pexec mode